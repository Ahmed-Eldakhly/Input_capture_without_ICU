
lab1_PWMTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000552  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a98  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a2d  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  7a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_vidInit>:
#include "ADC_int.h"
#include "ADC_reg.h"


void ADC_vidInit(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	/* Choose AREF as reference voltage */
	CLR_BIT(ADMUX,REFS0);
  8a:	a7 e2       	ldi	r26, 0x27	; 39
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e2       	ldi	r30, 0x27	; 39
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
  98:	a7 e2       	ldi	r26, 0x27	; 39
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e7 e2       	ldi	r30, 0x27	; 39
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	8c 93       	st	X, r24

	/* Select division factor to 2 */
	CLR_BIT(ADCSRA,ADPS0);
  a6:	a6 e2       	ldi	r26, 0x26	; 38
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e6 e2       	ldi	r30, 0x26	; 38
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8e 7f       	andi	r24, 0xFE	; 254
  b2:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS1);
  b4:	a6 e2       	ldi	r26, 0x26	; 38
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e6 e2       	ldi	r30, 0x26	; 38
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADPS2);
  c2:	a6 e2       	ldi	r26, 0x26	; 38
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 e2       	ldi	r30, 0x26	; 38
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	8c 93       	st	X, r24

	/* Enable ADC */
	SET_BIT(ADCSRA,ADEN);
  d0:	a6 e2       	ldi	r26, 0x26	; 38
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e6 e2       	ldi	r30, 0x26	; 38
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	8c 93       	st	X, r24

}
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <ADC_u16GetAdValue>:

u16 ADC_u16GetAdValue(u8 u8ChannelId)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	89 83       	std	Y+1, r24	; 0x01
	/* Select required channel ID */
	ADMUX = (ADMUX & ~(0x1F)) | u8ChannelId;
  f0:	a7 e2       	ldi	r26, 0x27	; 39
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e7 e2       	ldi	r30, 0x27	; 39
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	98 2f       	mov	r25, r24
  fc:	90 7e       	andi	r25, 0xE0	; 224
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	89 2b       	or	r24, r25
 102:	8c 93       	st	X, r24

	/* start adc conversion */
	SET_BIT(ADCSRA,ADSC);
 104:	a6 e2       	ldi	r26, 0x26	; 38
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e6 e2       	ldi	r30, 0x26	; 38
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8c 93       	st	X, r24

	while(GET_BIT(ADCSRA,ADIF) == 0);
 112:	e6 e2       	ldi	r30, 0x26	; 38
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	80 71       	andi	r24, 0x10	; 16
 11e:	90 70       	andi	r25, 0x00	; 0
 120:	95 95       	asr	r25
 122:	87 95       	ror	r24
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	95 95       	asr	r25
 12a:	87 95       	ror	r24
 12c:	95 95       	asr	r25
 12e:	87 95       	ror	r24
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	79 f3       	breq	.-34     	; 0x112 <ADC_u16GetAdValue+0x2e>

	SET_BIT(ADCSRA,ADIF);
 134:	a6 e2       	ldi	r26, 0x26	; 38
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e6 e2       	ldi	r30, 0x26	; 38
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8c 93       	st	X, r24

	return ADC;
 142:	e4 e2       	ldi	r30, 0x24	; 36
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	91 81       	ldd	r25, Z+1	; 0x01

}
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <DIO_SetPinValue>:
volatile u8* DIO_InRegisters  [4] = {PINA_Register , PINB_Register , PINC_Register , PIND_Register };
volatile u8* DIO_DirRegisters [4] = {DDRA_Register , DDRB_Register , DDRC_Register , DDRD_Register };

/* IO Pins */
void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	00 d0       	rcall	.+0      	; 0x158 <DIO_SetPinValue+0x6>
 158:	0f 92       	push	r0
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	6a 83       	std	Y+2, r22	; 0x02
 162:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	08 f0       	brcs	.+2      	; 0x16c <DIO_SetPinValue+0x1a>
 16a:	54 c0       	rjmp	.+168    	; 0x214 <DIO_SetPinValue+0xc2>
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	08 f0       	brcs	.+2      	; 0x174 <DIO_SetPinValue+0x22>
 172:	50 c0       	rjmp	.+160    	; 0x214 <DIO_SetPinValue+0xc2>
	{
		if (u8PinValCopy == HIGH)
 174:	8b 81       	ldd	r24, Y+3	; 0x03
 176:	8f 3f       	cpi	r24, 0xFF	; 255
 178:	29 f5       	brne	.+74     	; 0x1c4 <DIO_SetPinValue+0x72>
		{
			SET_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	fc 01       	movw	r30, r24
 186:	e0 5a       	subi	r30, 0xA0	; 160
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	a0 81       	ld	r26, Z
 18c:	b1 81       	ldd	r27, Z+1	; 0x01
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	fc 01       	movw	r30, r24
 19a:	e0 5a       	subi	r30, 0xA0	; 160
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	01 90       	ld	r0, Z+
 1a0:	f0 81       	ld	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	80 81       	ld	r24, Z
 1a6:	48 2f       	mov	r20, r24
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 2e       	mov	r0, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinValue+0x68>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinValue+0x64>
 1be:	84 2b       	or	r24, r20
 1c0:	8c 93       	st	X, r24
 1c2:	28 c0       	rjmp	.+80     	; 0x214 <DIO_SetPinValue+0xc2>
		}

		else if (u8PinValCopy == LOW)
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	88 23       	and	r24, r24
 1c8:	29 f5       	brne	.+74     	; 0x214 <DIO_SetPinValue+0xc2>
		{
			CLR_BIT(*DIO_OutRegisters[u8PortIdCopy],u8PinIdCopy);
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	fc 01       	movw	r30, r24
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	a0 81       	ld	r26, Z
 1dc:	b1 81       	ldd	r27, Z+1	; 0x01
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	fc 01       	movw	r30, r24
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	01 90       	ld	r0, Z+
 1f0:	f0 81       	ld	r31, Z
 1f2:	e0 2d       	mov	r30, r0
 1f4:	80 81       	ld	r24, Z
 1f6:	48 2f       	mov	r20, r24
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	28 2f       	mov	r18, r24
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 2e       	mov	r0, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinValue+0xb8>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinValue+0xb4>
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	cf 91       	pop	r28
 21c:	df 91       	pop	r29
 21e:	08 95       	ret

00000220 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 220:	df 93       	push	r29
 222:	cf 93       	push	r28
 224:	00 d0       	rcall	.+0      	; 0x226 <DIO_GetPinValue+0x6>
 226:	0f 92       	push	r0
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	8a 83       	std	Y+2, r24	; 0x02
 22e:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	50 f5       	brcc	.+84     	; 0x28a <DIO_GetPinValue+0x6a>
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	88 30       	cpi	r24, 0x08	; 8
 23a:	38 f5       	brcc	.+78     	; 0x28a <DIO_GetPinValue+0x6a>
	{
		u8ResultLocal= GET_BIT(*DIO_InRegisters[u8PortIdCopy],u8PinIdCopy);
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	fc 01       	movw	r30, r24
 248:	e8 59       	subi	r30, 0x98	; 152
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	01 90       	ld	r0, Z+
 24e:	f0 81       	ld	r31, Z
 250:	e0 2d       	mov	r30, r0
 252:	80 81       	ld	r24, Z
 254:	48 2f       	mov	r20, r24
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_GetPinValue+0x48>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_GetPinValue+0x44>
 26c:	9a 01       	movw	r18, r20
 26e:	28 23       	and	r18, r24
 270:	39 23       	and	r19, r25
 272:	8b 81       	ldd	r24, Y+3	; 0x03
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	a9 01       	movw	r20, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_GetPinValue+0x60>
 27c:	55 95       	asr	r21
 27e:	47 95       	ror	r20
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_GetPinValue+0x5c>
 284:	ca 01       	movw	r24, r20
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_GetPinValue+0x6e>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
 28e:	89 81       	ldd	r24, Y+1	; 0x01
}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <DIO_SetPinDirection>:

void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <DIO_SetPinDirection+0x6>
 2a2:	0f 92       	push	r0
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	89 83       	std	Y+1, r24	; 0x01
 2aa:	6a 83       	std	Y+2, r22	; 0x02
 2ac:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <DIO_SetPinDirection+0x1a>
 2b4:	54 c0       	rjmp	.+168    	; 0x35e <DIO_SetPinDirection+0xc2>
 2b6:	8a 81       	ldd	r24, Y+2	; 0x02
 2b8:	88 30       	cpi	r24, 0x08	; 8
 2ba:	08 f0       	brcs	.+2      	; 0x2be <DIO_SetPinDirection+0x22>
 2bc:	50 c0       	rjmp	.+160    	; 0x35e <DIO_SetPinDirection+0xc2>
	{
		if ( u8PinDirCopy == OUTPUT )
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	8f 3f       	cpi	r24, 0xFF	; 255
 2c2:	29 f5       	brne	.+74     	; 0x30e <DIO_SetPinDirection+0x72>
		{
			SET_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
 2c6:	88 2f       	mov	r24, r24
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	fc 01       	movw	r30, r24
 2d0:	e0 59       	subi	r30, 0x90	; 144
 2d2:	ff 4f       	sbci	r31, 0xFF	; 255
 2d4:	a0 81       	ld	r26, Z
 2d6:	b1 81       	ldd	r27, Z+1	; 0x01
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	88 2f       	mov	r24, r24
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	fc 01       	movw	r30, r24
 2e4:	e0 59       	subi	r30, 0x90	; 144
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	01 90       	ld	r0, Z+
 2ea:	f0 81       	ld	r31, Z
 2ec:	e0 2d       	mov	r30, r0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_SetPinDirection+0x68>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_SetPinDirection+0x64>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	28 c0       	rjmp	.+80     	; 0x35e <DIO_SetPinDirection+0xc2>
		}

		else if ( u8PinDirCopy == INPUT )
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	88 23       	and	r24, r24
 312:	29 f5       	brne	.+74     	; 0x35e <DIO_SetPinDirection+0xc2>
		{
			CLR_BIT(*DIO_DirRegisters[u8PortIdCopy],u8PinIdCopy);
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	fc 01       	movw	r30, r24
 320:	e0 59       	subi	r30, 0x90	; 144
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	a0 81       	ld	r26, Z
 326:	b1 81       	ldd	r27, Z+1	; 0x01
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	88 2f       	mov	r24, r24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	fc 01       	movw	r30, r24
 334:	e0 59       	subi	r30, 0x90	; 144
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	01 90       	ld	r0, Z+
 33a:	f0 81       	ld	r31, Z
 33c:	e0 2d       	mov	r30, r0
 33e:	80 81       	ld	r24, Z
 340:	48 2f       	mov	r20, r24
 342:	8a 81       	ldd	r24, Y+2	; 0x02
 344:	28 2f       	mov	r18, r24
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_SetPinDirection+0xb8>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_SetPinDirection+0xb4>
 358:	80 95       	com	r24
 35a:	84 23       	and	r24, r20
 35c:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	cf 91       	pop	r28
 366:	df 91       	pop	r29
 368:	08 95       	ret

0000036a <DIO_SetPortDirection>:


/* IO Ports */
void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	00 d0       	rcall	.+0      	; 0x370 <DIO_SetPortDirection+0x6>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	84 30       	cpi	r24, 0x04	; 4
 37c:	68 f4       	brcc	.+26     	; 0x398 <DIO_SetPortDirection+0x2e>
	{
		*DIO_DirRegisters[u8PortId] = u8PortDir;
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	fc 01       	movw	r30, r24
 38a:	e0 59       	subi	r30, 0x90	; 144
 38c:	ff 4f       	sbci	r31, 0xFF	; 255
 38e:	01 90       	ld	r0, Z+
 390:	f0 81       	ld	r31, Z
 392:	e0 2d       	mov	r30, r0
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	80 83       	st	Z, r24

	else
	{
		/* Wrong Port ID */
	}
}
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	cf 91       	pop	r28
 39e:	df 91       	pop	r29
 3a0:	08 95       	ret

000003a2 <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 3a2:	df 93       	push	r29
 3a4:	cf 93       	push	r28
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <DIO_SetPortValue+0x6>
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	if (u8PortId <= PORTD)
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	84 30       	cpi	r24, 0x04	; 4
 3b4:	68 f4       	brcc	.+26     	; 0x3d0 <DIO_SetPortValue+0x2e>
	{
		*DIO_OutRegisters[u8PortId] = u8PortVal;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	fc 01       	movw	r30, r24
 3c2:	e0 5a       	subi	r30, 0xA0	; 160
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	01 90       	ld	r0, Z+
 3c8:	f0 81       	ld	r31, Z
 3ca:	e0 2d       	mov	r30, r0
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	80 83       	st	Z, r24

	else
	{
		/* Wrong Port ID */
	}
}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	08 95       	ret

000003da <TIM0_vidInit>:
#include "TIM0_Configure.h"
#include"TIM0_PRIVATE.h"
#include"TIM0_interface.h"
#include"utils.h"
void TIM0_vidInit(void)
{
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
		Clear_Bit(TCCR0,WGM01);
		Set_Bit(TIMSK,TOIE0);
	}
	else if(TIMER_MODE==CTC_MODE)
	{
		Clear_Bit(TCCR0,WGM00);
 3e2:	a3 e5       	ldi	r26, 0x53	; 83
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	e3 e5       	ldi	r30, 0x53	; 83
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	8f 7b       	andi	r24, 0xBF	; 191
 3ee:	8c 93       	st	X, r24
		Set_Bit(TCCR0,WGM01);
 3f0:	a3 e5       	ldi	r26, 0x53	; 83
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	e3 e5       	ldi	r30, 0x53	; 83
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	8c 93       	st	X, r24
		Set_Bit(TIMSK,TOIE0);
 3fe:	a9 e5       	ldi	r26, 0x59	; 89
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e9 e5       	ldi	r30, 0x59	; 89
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	8c 93       	st	X, r24
	}
	TCCR0|=PRESCALER_SELECT;
 40c:	a3 e5       	ldi	r26, 0x53	; 83
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e3 e5       	ldi	r30, 0x53	; 83
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	82 60       	ori	r24, 0x02	; 2
 418:	8c 93       	st	X, r24
}
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	08 95       	ret

00000420 <TIM0_vidSetTimerval>:


void TIM0_vidSetTimerval(u8 u8CNT)
{
 420:	df 93       	push	r29
 422:	cf 93       	push	r28
 424:	0f 92       	push	r0
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=u8CNT;
 42c:	e2 e5       	ldi	r30, 0x52	; 82
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	89 81       	ldd	r24, Y+1	; 0x01
 432:	80 83       	st	Z, r24
}
 434:	0f 90       	pop	r0
 436:	cf 91       	pop	r28
 438:	df 91       	pop	r29
 43a:	08 95       	ret

0000043c <TIM0_vidSetTimerCompiar>:
void TIM0_vidSetTimerCompiar(u8 u8CNR)
{
 43c:	df 93       	push	r29
 43e:	cf 93       	push	r28
 440:	0f 92       	push	r0
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	89 83       	std	Y+1, r24	; 0x01
	OCR0=u8CNR;
 448:	ec e5       	ldi	r30, 0x5C	; 92
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	80 83       	st	Z, r24
}
 450:	0f 90       	pop	r0
 452:	cf 91       	pop	r28
 454:	df 91       	pop	r29
 456:	08 95       	ret

00000458 <main>:
#include"DIO_int.h"
#include"TIM0_interface.h"
#include"utils.h"
#include"avr/interrupt.h"
void main ()
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	00 d0       	rcall	.+0      	; 0x462 <main+0xa>
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(PORTB,PIN3,OUTPUT);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	63 e0       	ldi	r22, 0x03	; 3
 46a:	4f ef       	ldi	r20, 0xFF	; 255
 46c:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,PIN0,INPUT);
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	0e 94 4e 01 	call	0x29c	; 0x29c <DIO_SetPinDirection>
	ADC_vidInit();
 47a:	0e 94 41 00 	call	0x82	; 0x82 <ADC_vidInit>
	TCCR0=0b01101001;
 47e:	e3 e5       	ldi	r30, 0x53	; 83
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	89 e6       	ldi	r24, 0x69	; 105
 484:	80 83       	st	Z, r24
	while(1)
	{
		u16 a=ADC_u16GetAdValue(0);
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 72 00 	call	0xe4	; 0xe4 <ADC_u16GetAdValue>
 48c:	9a 83       	std	Y+2, r25	; 0x02
 48e:	89 83       	std	Y+1, r24	; 0x01
		OCR0=(u8)(((u32)a*255)/1023);
 490:	0c e5       	ldi	r16, 0x5C	; 92
 492:	10 e0       	ldi	r17, 0x00	; 0
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	9a 81       	ldd	r25, Y+2	; 0x02
 498:	cc 01       	movw	r24, r24
 49a:	a0 e0       	ldi	r26, 0x00	; 0
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	bc 01       	movw	r22, r24
 4a8:	cd 01       	movw	r24, r26
 4aa:	0e 94 66 02 	call	0x4cc	; 0x4cc <__mulsi3>
 4ae:	dc 01       	movw	r26, r24
 4b0:	cb 01       	movw	r24, r22
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	33 e0       	ldi	r19, 0x03	; 3
 4b6:	40 e0       	ldi	r20, 0x00	; 0
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	bc 01       	movw	r22, r24
 4bc:	cd 01       	movw	r24, r26
 4be:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodsi4>
 4c2:	da 01       	movw	r26, r20
 4c4:	c9 01       	movw	r24, r18
 4c6:	f8 01       	movw	r30, r16
 4c8:	80 83       	st	Z, r24
 4ca:	dd cf       	rjmp	.-70     	; 0x486 <main+0x2e>

000004cc <__mulsi3>:
 4cc:	62 9f       	mul	r22, r18
 4ce:	d0 01       	movw	r26, r0
 4d0:	73 9f       	mul	r23, r19
 4d2:	f0 01       	movw	r30, r0
 4d4:	82 9f       	mul	r24, r18
 4d6:	e0 0d       	add	r30, r0
 4d8:	f1 1d       	adc	r31, r1
 4da:	64 9f       	mul	r22, r20
 4dc:	e0 0d       	add	r30, r0
 4de:	f1 1d       	adc	r31, r1
 4e0:	92 9f       	mul	r25, r18
 4e2:	f0 0d       	add	r31, r0
 4e4:	83 9f       	mul	r24, r19
 4e6:	f0 0d       	add	r31, r0
 4e8:	74 9f       	mul	r23, r20
 4ea:	f0 0d       	add	r31, r0
 4ec:	65 9f       	mul	r22, r21
 4ee:	f0 0d       	add	r31, r0
 4f0:	99 27       	eor	r25, r25
 4f2:	72 9f       	mul	r23, r18
 4f4:	b0 0d       	add	r27, r0
 4f6:	e1 1d       	adc	r30, r1
 4f8:	f9 1f       	adc	r31, r25
 4fa:	63 9f       	mul	r22, r19
 4fc:	b0 0d       	add	r27, r0
 4fe:	e1 1d       	adc	r30, r1
 500:	f9 1f       	adc	r31, r25
 502:	bd 01       	movw	r22, r26
 504:	cf 01       	movw	r24, r30
 506:	11 24       	eor	r1, r1
 508:	08 95       	ret

0000050a <__udivmodsi4>:
 50a:	a1 e2       	ldi	r26, 0x21	; 33
 50c:	1a 2e       	mov	r1, r26
 50e:	aa 1b       	sub	r26, r26
 510:	bb 1b       	sub	r27, r27
 512:	fd 01       	movw	r30, r26
 514:	0d c0       	rjmp	.+26     	; 0x530 <__udivmodsi4_ep>

00000516 <__udivmodsi4_loop>:
 516:	aa 1f       	adc	r26, r26
 518:	bb 1f       	adc	r27, r27
 51a:	ee 1f       	adc	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	a2 17       	cp	r26, r18
 520:	b3 07       	cpc	r27, r19
 522:	e4 07       	cpc	r30, r20
 524:	f5 07       	cpc	r31, r21
 526:	20 f0       	brcs	.+8      	; 0x530 <__udivmodsi4_ep>
 528:	a2 1b       	sub	r26, r18
 52a:	b3 0b       	sbc	r27, r19
 52c:	e4 0b       	sbc	r30, r20
 52e:	f5 0b       	sbc	r31, r21

00000530 <__udivmodsi4_ep>:
 530:	66 1f       	adc	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	1a 94       	dec	r1
 53a:	69 f7       	brne	.-38     	; 0x516 <__udivmodsi4_loop>
 53c:	60 95       	com	r22
 53e:	70 95       	com	r23
 540:	80 95       	com	r24
 542:	90 95       	com	r25
 544:	9b 01       	movw	r18, r22
 546:	ac 01       	movw	r20, r24
 548:	bd 01       	movw	r22, r26
 54a:	cf 01       	movw	r24, r30
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
